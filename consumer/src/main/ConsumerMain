package markiza.consumer;

import cathie_dev.consumer_module.KafkaListenerMessages;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.Bean;
import org.apache.camel.RoutesBuilder;
import org.apache.camel.component.servlet.CamelHttpTransportServlet;
import org.apache.camel.rx.ReactiveCamel;
import org.apache.camel.spring.SpringCamelContext;


@SpringBootApplication
public class ConsumerMain {

    static boolean startRx = false;

    public static void main(String[] args) {
        ConfigurableApplicationContext context = SpringApplication.run(ConsumerMain.class, args);
        if (startRx) {
            context.getBean(ConsObservable.class).start();
        }
    }

    @Configuration
    public static class CamelConfiguration {

        private static final String CAMEL_URL_MAPPING = "/camel/*";
        private static final String CAMEL_SERVLET_NAME = "CamelServlet";

        @Bean
        public ServletRegistrationBean servletRegistrationBean() {
            ServletRegistrationBean registration = new ServletRegistrationBean(new CamelHttpTransportServlet(),
                    CAMEL_URL_MAPPING);
            registration.setName(CAMEL_SERVLET_NAME);
            return registration;
        }

        @Bean
        public SpringCamelContext camelContext(ApplicationContext applicationContext) throws Exception {
            SpringCamelContext camelContext = new SpringCamelContext(applicationContext);
            camelContext.addRoutes(kafkaRoute());
            return camelContext;
        }

        @Bean
        public ReactiveCamel reactiveCamel(SpringCamelContext camelContext) {
            return new ReactiveCamel(camelContext);
        }

        public @Bean ConsObservable rx() {
            return new ConsObservable();
        }

        @Bean
        public RoutesBuilder kafkaRoute() {
            return new KafkaRoute();
        }
        @Bean
        public KafkaListenerMessages messageListener() {
            return new MessageListener();
        }
    }
}